# Highly divisible triangular number
# Problem 12

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3, 6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4, 7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

import math

def make_triangle_number(n:int) -> int:
    #sequence 1+2+3+...+n
    return ((n**2+n)//2)

def get_divisors(n:int) -> int:
    divsors =[]
    for i in range(1,math.floor(math.sqrt(n)+1)):
        if n % i == 0:
            divsors.append(i)
            divsors.append(n//i)
    divsors.sort()
    return divsors


if __name__ == "__main__":
    stop = False
    n=1
    while stop == False:
        triangle=make_triangle_number(n)
        divisors=get_divisors(triangle)
        divisor_count=len(divisors)
        print(f"{n} : {triangle} : {divisor_count}")
        if divisor_count > 500:
            break
        n+=1
        
    # print(result)